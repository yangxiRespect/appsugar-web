buildscript {
	repositories {
		maven{
			url "http://maven.aliyun.com/nexus/content/groups/public"
		}
		mavenCentral()
		jcenter()
	}
	dependencies {
    	classpath 'com.sourcemuse.gradle.plugin:gradle-mongo-plugin:0.13.0'
     	classpath 'com.github.kstyrc:embedded-redis:0.6'
    }
}
plugins {
	//gradle release -Prelease.useAutomaticVersion=true -Prelease.releaseVersion=1.0.0-release -Prelease.newVersion=1.0.1-SNAPSHOT
    id 'net.researchgate.release' version '2.4.0'
    //querydsl
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.7" apply  false
}
apply plugin: 'java'

def loadGroovyConfig(p){
		def configFile = file("environment.groovy")
		def profile = System.getenv("profile")
		new ConfigSlurper(p ? p : (profile ? profile : "test")).parse(configFile.toURL()).toProperties()
}



configure(subprojects) { project ->
	apply plugin: "java"
	apply plugin: "maven"
	if(project.name.startsWith("appsugar-data-")){
		apply plugin: "com.ewerk.gradle.plugins.querydsl"
		compileQuerydsl.options.encoding = "UTF-8"
		sourceSets {
		    generated {
		        java {
		            srcDirs = ['src/main/generated']
		        }
		    }
		}
		querydsl{
			querydslDefault = true
			querydslSourcesDir = sourceSets.generated.java.srcDirs.iterator().next()
			dependencies{
				compile ("org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.0.Final")
			}
		}
	}
	repositories {
		maven{
			url "http://maven.aliyun.com/nexus/content/groups/public"
		}
		mavenCentral()
	}
	// put default properties
	loadGroovyConfig("base").each{ k, v -> ext.set(k,v) }
	// put profile properties default is test
	loadGroovyConfig(null).each{ k, v -> ext.set(k,v) }
	
	ext{
		junitVersion = "4.12"
		jpaVersion = "1.0.0.Final"
		springDataCommonsVersion = "1.12.2.RELEASE"
		springDataJpaVersion = "1.10.4.RELEASE"
		springMongodbVersion = "1.9.3.RELEASE"
		springRedisVersion = "1.7.4.RELEASE"
		springSolrVersion = "2.1.0.RELEASE"
		springVersion = "4.3.6.RELEASE"
		slf4jVersion = "1.7.21"
		commonsLangVersion = "3.4"
		commonsCollectionsVersion = "4.1"
		commonsBeanutilsVersion = "1.9.3"
		guavaVersion = "19.0"
		disruptorVersion = "3.3.4"
		jacksonVersion = "2.8.3"
		logbackVersion = "1.1.7"
		jedisVersion = "2.9.0"
		redissonVersion = "3.0.1"
		solrVersion = "6.3.0"
		queryDslVersion = "4.1.4"
		nettyVersion = "4.1.6.Final"
	}
	compileJava.options.encoding = ext["encoding"]
	compileTestJava.options.encoding = ext["encoding"]
	
	dependencies{
		testCompile ("junit:junit:${junitVersion}")
	}
	task sourcesJar(type: Jar, dependsOn: classes) {
	    classifier = 'sources'
	    from sourceSets.main.allSource
	}
	
	artifacts {
	    archives sourcesJar
	}
	
	//deploy to maven nexus
	uploadArchives {
	    repositories {
	       mavenDeployer {
             repository(url: "http://nexus.ggxueche.cn/nexus/content/repositories/releases") {
            	 authentication(userName: "${nexusUserName}", password: "${nexusPassword}")
			 }
			 snapshotRepository(url: "http://nexus.ggxueche.cn/nexus/content/repositories/snapshots") {
                 authentication(userName: "${nexusUserName}", password: "${nexusPassword}")  
             }  
	       }
	    }
	}
	
	test{
		testLogging{
			showStandardStreams  = true
		}
		systemProperties = [
	            refreshDb: true
	    ]
	}
	rootProject.tasks.afterReleaseBuild.dependsOn uploadArchives
}





project(":appsugar-test"){
	dependencies{
		compile ("commons-beanutils:commons-beanutils:${commonsBeanutilsVersion}")
		compile("com.google.guava:guava:${guavaVersion}")
		compile("org.apache.commons:commons-lang3:${commonsLangVersion}")
		compile("org.apache.commons:commons-collections4:${commonsCollectionsVersion}")
		compile ("junit:junit:${junitVersion}")
		compile ("ch.qos.logback:logback-classic:${logbackVersion}")
		compile ("org.springframework:spring-test:${springVersion}")
		compile ("org.springframework:spring-context:${springVersion}")
		compile ("com.fasterxml.jackson.core:jackson-core:${jacksonVersion}")
		compile ("com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}")
		compile ("com.fasterxml.jackson.dataformat:jackson-dataformat-xml:${jacksonVersion}")
		compileOnly ("org.springframework.data:spring-data-commons:${springDataCommonsVersion}")
	}
}

project(":appsugar-bean"){
	dependencies{
		compileOnly ("org.springframework.data:spring-data-commons:1.12.2.RELEASE")
		compileOnly ("org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.0.Final")
	}
}

project(":appsugar-commons"){
	dependencies{
		compile	("com.google.guava:guava:${guavaVersion}")
		compileOnly ("com.lmax:disruptor:${disruptorVersion}")
		testCompile ("com.lmax:disruptor:${disruptorVersion}")
	}
}

project(":appsugar-data-common"){
	dependencies{
		compile project(":appsugar-bean")
		compile("org.apache.commons:commons-lang3:${commonsLangVersion}")
		compile("org.apache.commons:commons-collections4:${commonsCollectionsVersion}")
		compile("com.google.guava:guava:${guavaVersion}")
		compile("org.springframework.data:spring-data-commons:${springDataCommonsVersion}")
		compile("org.springframework:spring-context:${springVersion}")
		compileOnly("com.querydsl:querydsl-core:${queryDslVersion}")
		compileOnly("com.querydsl:querydsl-apt:${queryDslVersion}")
	}
}
project(":appsugar-data-jpa"){
	dependencies{
		compile project(":appsugar-data-common")
		compile("org.hibernate.javax.persistence:hibernate-jpa-2.1-api:${jpaVersion}")
		compile("org.springframework.data:spring-data-jpa:${springDataJpaVersion}")
		compileOnly("com.querydsl:querydsl-jpa:${queryDslVersion}")
	}
}

project(":appsugar-data-mongodb"){
	apply plugin: 'mongo'
	dependencies{
		compile project(":appsugar-data-common")
		compile ("org.springframework.data:spring-data-mongodb:${springMongodbVersion}")
		compileOnly ("com.querydsl:querydsl-mongodb:${queryDslVersion}")
		testCompile ("com.querydsl:querydsl-mongodb:${queryDslVersion}")
		testCompile project(":appsugar-test")
	}
	mongo {
	    port 27017
	    logging 'console'
	}
	test {
		runWithMongoDb = true
	}
	querydsl{
		springDataMongo  = true
	}
}

project(":appsugar-data-redis"){
	dependencies{
		compile project(":appsugar-data-common")
		compile ("org.springframework.data:spring-data-redis:${springRedisVersion}")
		compile ("org.springframework.integration:spring-integration-redis:${springVersion}")
		compileOnly ("com.querydsl:querydsl-collections:${queryDslVersion}")
		testCompile ("com.querydsl:querydsl-collections:${queryDslVersion}")
		testCompile ("org.redisson:redisson:${redissonVersion}")
		testCompile ("redis.clients:jedis:${jedisVersion}")
		testCompile project(":appsugar-test")
	}
	def server=new redis.embedded.RedisServerBuilder().setting("maxheap 512Mb").port(6379).build();
	task (stopRedisServer) {
		doLast{
			println "shutdown redis server"
			server.stop();
		}
	} 
	test.doFirst{
		server.start();
	}
	test.finalizedBy(stopRedisServer)
	
}

project(":appsugar-data-solr"){
	dependencies{
		compile project(":appsugar-data-common")
		compile("org.springframework.data:spring-data-solr:${springSolrVersion}")
		testCompile("org.apache.solr:solr-core:${solrVersion}")
		testCompile project(":appsugar-test")
	}
	//skip test until spring support solr 6 
	test.enabled = false;
}

project(":appsugar-service"){
	dependencies{
		compile project(":appsugar-data-jpa")
		compileOnly("org.hibernate.javax.persistence:hibernate-jpa-2.1-api:${jpaVersion}")
		compileOnly("org.springframework.data:spring-data-jpa:${springDataJpaVersion}")
	}
}

